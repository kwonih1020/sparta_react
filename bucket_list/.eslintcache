[{"/Users/Iccck/ICK/스파르타코딩/sparta_react/bucket_list/src/Progress.js":"1","/Users/Iccck/ICK/스파르타코딩/sparta_react/bucket_list/src/redux/modules/bucket.js":"2","/Users/Iccck/ICK/스파르타코딩/sparta_react/bucket_list/src/App.js":"3","/Users/Iccck/ICK/스파르타코딩/sparta_react/bucket_list/src/BucketList.js":"4","/Users/Iccck/ICK/스파르타코딩/sparta_react/bucket_list/src/index.js":"5","/Users/Iccck/ICK/스파르타코딩/sparta_react/bucket_list/src/Detail.js":"6","/Users/Iccck/ICK/스파르타코딩/sparta_react/bucket_list/src/NotFound.js":"7","/Users/Iccck/ICK/스파르타코딩/sparta_react/bucket_list/src/redux/configStore.js":"8","/Users/Iccck/ICK/스파르타코딩/sparta_react/bucket_list/src/firebase.js":"9","/Users/Iccck/ICK/스파르타코딩/sparta_react/bucket_list/src/Spinner.js":"10"},{"size":1247,"mtime":1610122511776,"results":"11","hashOfConfig":"12"},{"size":5113,"mtime":1610766659751,"results":"13","hashOfConfig":"12"},{"size":5916,"mtime":1610766613522,"results":"14","hashOfConfig":"12"},{"size":1295,"mtime":1610121942893,"results":"15","hashOfConfig":"12"},{"size":817,"mtime":1609964936255,"results":"16","hashOfConfig":"12"},{"size":1583,"mtime":1610764921627,"results":"17","hashOfConfig":"12"},{"size":298,"mtime":1609945184369,"results":"18","hashOfConfig":"12"},{"size":468,"mtime":1610761053594,"results":"19","hashOfConfig":"12"},{"size":748,"mtime":1610130824188,"results":"20","hashOfConfig":"12"},{"size":480,"mtime":1610765247018,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"79wbzn",{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/Iccck/ICK/스파르타코딩/sparta_react/bucket_list/src/Progress.js",["46","47","48","49","50"],"// 리액트 패키지를 불러옵니다.\nimport React from \"react\";\nimport styled from \"styled-components\";\n\n// redux hook을 불러옵니다.\nimport { useDispatch, useSelector } from \"react-redux\";\n// 내가 만든 액션 생성 함수를 불러옵니다.\nimport { deleteBucket, updateBucket } from \"./redux/modules/bucket\";\n\nconst Progress = (props) => {\n  // 스토어에서 상태값 가져오기\n  const bucket_list = useSelector((state) => state.bucket.list);\n  \n  let count = 0;\n\n  let goal_per = bucket_list.map((l, idx) => {\n    if(l.completed){\n        count++;\n    }\n  });\n\n  return (\n    <ProgressBar>\n      <HighLight width={(count / bucket_list.length) * 100 + \"%\"}></HighLight>\n      <Dot/>\n    </ProgressBar>\n  );\n};\n\nconst ProgressBar = styled.div`\n  background: #eee;\n  width: 100%;\n  height: 20px;\n  display: flex;\n  border-radius: 10px;\n  align-items: center;\n`;\n\nconst HighLight = styled.div`\n  background: #673ab7;\n  width: ${(props) => props.width};\n  height: 20px;\n  border-radius: 10px;\n  transition: 2s;\n`;\n\nconst Dot = styled.div`\n  background: #fff;\n  border: 5px solid #673ab7;\n  box-sizing: border-box;\n  margin: 0px 0px 0px -10px;\n  width: 40px;\n  height: 40px;\n  border-radius: 20px;\n`;\n\nexport default Progress;\n","/Users/Iccck/ICK/스파르타코딩/sparta_react/bucket_list/src/redux/modules/bucket.js",["51"],"import {firestore} from \"../../firebase\";\n\nconst bucket_db = firestore.collection(\"bucket\");\n\n// Actions\nconst LOAD = \"bucket/LOAD\";\nconst CREATE = \"bucket/CREATE\";\nconst DELETE = \"bucket/DELETE\";\nconst UPDATE = \"bucket/UPDATE\";\n// is loaded\nconst LOADED = \"bucket/LOADED\";\n\nconst initialState = {\n  //   list: [\"영화관 가기\", \"매일 책읽기\", \"수영 배우기\"],\n  is_loaded: false,\n  list: [\n    { text: \"영화관 가기\", completed: false },\n    { text: \"매일 책읽기\", completed: false },\n    { text: \"수영 배우기\", completed: false },\n  ],\n};\n\n// Action Creators\nexport const loadBucket = (bucket) => {\n  return { type: LOAD, bucket };\n};\n\nexport const createBucket = (bucket) => {\n  return { type: CREATE, bucket };\n};\n\nexport const deleteBucket = (bucket) => {\n  return { type: DELETE, bucket };\n};\n\nexport const updateBucket = (bucket) => {\n  return { type: UPDATE, bucket };\n};\n\n// loaded를 받아서 is_loaded 값을 true/false로 바꿔줄 액션 생성 함수입니다.\nexport const isLoaded = (loaded) => {\n  return {type: LOADED, loaded}\n}\n\n// 파이어베이스랑 통신하는 부분\nexport const loadBucketFB = () => {\n  return function (dispatch) {\n    \n    bucket_db.get().then((docs) => {\n      let bucket_data = [];\n\n      docs.forEach((doc) => {\n        // 도큐먼트 객체를 확인해보자!\n        console.log(doc);\n        // 도큐먼트 데이터 가져오기\n        console.log(doc.data());\n        // 도큐먼트 id 가져오기\n        console.log(doc.id);\n\n        if(doc.exists){\n          bucket_data = [...bucket_data, {id: doc.id, ...doc.data()}];\n        }\n      });\n\n      console.log(bucket_data);\n      // 이제 액션 생성 함수한테 우리가 가져온 데이터를 넘겨줘요! 그러면 끝!\n      dispatch(loadBucket(bucket_data));\n    });\n  };\n};\n\n// 파이어베이스랑 통신하는 부분\nexport const addBucketFB = (bucket) => {\n  return function (dispatch) {\n\n    // 요청 보내기 전에 스피너를 보여줍시다\n    dispatch(isLoaded(false));\n\n    console.log(bucket);\n    // 생성할 데이터를 미리 만들게요!\n    let bucket_data = { text: bucket, completed: false };\n\n    // add()에 데이터를 넘겨줍시다!\n    bucket_db\n      .add(bucket_data)\n      .then((docRef) => {\n        // id를 추가한다!\n        bucket_data = { ...bucket_data, id: docRef.id };\n\n        console.log(bucket_data);\n\n        // 성공했을 때는? 액션 디스패치!\n        dispatch(createBucket(bucket_data));\n        // 스피너도 다시 없애줘여죠!\n        dispatch(isLoaded(true));\n      })\n      .catch((err) => {\n        // 여긴 에러가 났을 때 들어오는 구간입니다!\n        console.log(err);\n        window.alert('오류가 났네요! 나중에 다시 시도해주세요!');\n        dispatch(isLoaded(true));\n      });\n  };\n};\n\n// 파이어베이스랑 통신하는 부분\nexport const updateBucketFB = (bucket) => {\n  return function (dispatch, getState) {\n    // state에 있는 값을 가져옵니다!\n    const _bucket_data = getState().bucket.list[bucket];\n\n    // id가 없으면? 바로 끝내버립시다.\n    if (!_bucket_data.id) {\n      return;\n    }\n\n    // 새로운 값을 만들어요!\n    let bucket_data = { ..._bucket_data, completed: true };\n\n    bucket_db\n      .doc(bucket_data.id)\n      .update(bucket_data)\n      .then((res) => {\n        dispatch(updateBucket(bucket));\n      })\n      .catch((err) => {\n        console.log(\"err\");\n      });\n  };\n};\n\n// 파이어베이스랑 통신하는 부분\nexport const deleteBucketFB = (bucket) => {\n  return function (dispatch, getState) {\n    const _bucket_data = getState().bucket.list[bucket];\n    // id가 없으면? 바로 끝내버립시다.\n    if (!_bucket_data.id) {\n      return;\n    }\n    // 삭제하기\n    bucket_db\n      .doc(_bucket_data.id)\n      .delete()\n      .then((res) => {\n        dispatch(deleteBucket(bucket));\n      })\n      .catch((err) => {\n        console.log(\"err\");\n      });\n  };\n};\n\n// Reducer\nexport default function reducer(state = initialState, action) {\n\n  switch (action.type) {\n    // do reducer stuff\n    case \"bucket/LOAD\": {\n      if (action.bucket.length > 0) {\n        return { list: action.bucket, is_loaded: true };\n      }\n      \n      return state;\n    }\n\n    case \"bucket/CREATE\": {\n      \n      const new_bucket_list = [...state.list, \n        // { text: action.bucket, completed: false },\n        action.bucket, \n      ];\n      return { list: new_bucket_list };\n    }\n\n    case \"bucket/DELETE\": {\n      const bucket_list = state.list.filter((l, idx) => {\n        if (idx !== action.bucket) {\n          return l;\n        }\n      });\n      return { ...state, list: bucket_list };\n    }\n\n    case \"bucket/UPDATE\": {\n      const bucket_list = state.list.map((l, idx) => {\n        if (idx === action.bucket) {\n        \n          return { ...l, completed: true };\n        } \n\n        return l;\n      });\n\n      return { ...state, list: bucket_list };\n    }\n\n    case \"bucket/LOADED\": {\n      return {...state, is_loaded: action.loaded};\n    }\n\n    default:\n      return state;\n  }\n}\n","/Users/Iccck/ICK/스파르타코딩/sparta_react/bucket_list/src/App.js",["52","53","54"],"/Users/Iccck/ICK/스파르타코딩/sparta_react/bucket_list/src/BucketList.js",["55"],"/Users/Iccck/ICK/스파르타코딩/sparta_react/bucket_list/src/index.js",[],"/Users/Iccck/ICK/스파르타코딩/sparta_react/bucket_list/src/Detail.js",["56","57","58"],"/Users/Iccck/ICK/스파르타코딩/sparta_react/bucket_list/src/NotFound.js",[],"/Users/Iccck/ICK/스파르타코딩/sparta_react/bucket_list/src/redux/configStore.js",["59"],"//configStore.js\nimport { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport bucket from \"./modules/bucket\";\nimport { createBrowserHistory } from \"history\";\n\nexport const history = createBrowserHistory();\n\nconst middlewares = [thunk];\n\nconst enhancer = applyMiddleware(...middlewares);\nconst rootReducer = combineReducers({ bucket });\nconst store = createStore(rootReducer, enhancer);\n\nexport default store;\n",["60","61"],"/Users/Iccck/ICK/스파르타코딩/sparta_react/bucket_list/src/firebase.js",[],"/Users/Iccck/ICK/스파르타코딩/sparta_react/bucket_list/src/Spinner.js",[],{"ruleId":"62","severity":1,"message":"63","line":6,"column":10,"nodeType":"64","messageId":"65","endLine":6,"endColumn":21},{"ruleId":"62","severity":1,"message":"66","line":8,"column":10,"nodeType":"64","messageId":"65","endLine":8,"endColumn":22},{"ruleId":"62","severity":1,"message":"67","line":8,"column":24,"nodeType":"64","messageId":"65","endLine":8,"endColumn":36},{"ruleId":"62","severity":1,"message":"68","line":16,"column":7,"nodeType":"64","messageId":"65","endLine":16,"endColumn":15},{"ruleId":"69","severity":1,"message":"70","line":16,"column":43,"nodeType":"71","messageId":"72","endLine":16,"endColumn":45},{"ruleId":"69","severity":1,"message":"73","line":176,"column":54,"nodeType":"71","messageId":"74","endLine":176,"endColumn":56},{"ruleId":"62","severity":1,"message":"75","line":15,"column":9,"nodeType":"64","messageId":"65","endLine":15,"endColumn":19},{"ruleId":"62","severity":1,"message":"76","line":15,"column":21,"nodeType":"64","messageId":"65","endLine":15,"endColumn":33},{"ruleId":"62","severity":1,"message":"77","line":20,"column":10,"nodeType":"64","messageId":"65","endLine":20,"endColumn":19},{"ruleId":"62","severity":1,"message":"63","line":6,"column":9,"nodeType":"64","messageId":"65","endLine":6,"endColumn":20},{"ruleId":"62","severity":1,"message":"78","line":3,"column":8,"nodeType":"64","messageId":"65","endLine":3,"endColumn":14},{"ruleId":"62","severity":1,"message":"66","line":11,"column":3,"nodeType":"64","messageId":"65","endLine":11,"endColumn":15},{"ruleId":"62","severity":1,"message":"67","line":12,"column":3,"nodeType":"64","messageId":"65","endLine":12,"endColumn":15},{"ruleId":"62","severity":1,"message":"79","line":2,"column":57,"nodeType":"64","messageId":"65","endLine":2,"endColumn":64},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},"no-unused-vars","'useDispatch' is defined but never used.","Identifier","unusedVar","'deleteBucket' is defined but never used.","'updateBucket' is defined but never used.","'goal_per' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.filter() expects a value to be returned at the end of arrow function.","expectedAtEnd","'loadBucket' is defined but never used.","'createBucket' is defined but never used.","'firestore' is defined but never used.","'styled' is defined but never used.","'compose' is defined but never used.","no-native-reassign",["84"],"no-negated-in-lhs",["85"],"no-global-assign","no-unsafe-negation"]